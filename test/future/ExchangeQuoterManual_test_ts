import { waffle, upgrades, ethers } from "hardhat";
const { deployContract, solidity } = waffle;
import { MockProvider } from "ethereum-waffle";
const provider: MockProvider = waffle.provider;
import { BigNumber as BN, BigNumberish, utils, constants, Contract } from "ethers";
import chai from "chai";
const { expect } = chai;
chai.use(solidity);
import { config as dotenv_config } from "dotenv";
dotenv_config();

import { import_artifacts, ArtifactImports } from "./utilities/artifact_importer";
import { ExchangeQuoterManual } from "../typechain";

if(process.env.FORK_NETWORK === "mainnet"){
  describe("ExchangeQuoterManual", function () {
    const [deployer, governor, signer] = provider.getWallets();
    let artifacts: ArtifactImports;
    let quoter: ExchangeQuoterManual;
    const ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";
    const ETH_ADDRESS = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE";

    before(async function () {
      artifacts = await import_artifacts();
      await deployer.sendTransaction({to:deployer.address}); // for some reason this helps solidity-coverage
      // deploy exchange quoter manual
      quoter = (await deployContract(deployer, artifacts.ExchangeQuoterManual, [governor.address])) as ExchangeQuoterManual;
    });

    describe("governance", function() {
      it("starts with the correct governor", async function() {
        expect(await quoter.governance()).to.equal(governor.address);
      });
      it("rejects setting new governance by non governor", async function() {
        await expect(quoter.connect(deployer).setPendingGovernance(deployer.address)).to.be.revertedWith("!governance");
      });
      it("can set new governance", async function() {
        await quoter.connect(governor).setPendingGovernance(deployer.address);
        expect(await quoter.governance()).to.equal(governor.address);
        expect(await quoter.pendingGovernance()).to.equal(deployer.address);
      });
      it("rejects governance transfer by non governor", async function() {
        await expect(quoter.connect(signer).acceptGovernance()).to.be.revertedWith("!governance");
      });
      it("can transfer governance", async function() {
        let tx = await quoter.connect(deployer).acceptGovernance();
        await expect(tx)
          .to.emit(quoter, "GovernanceTransferred")
          .withArgs(deployer.address);
        expect(await quoter.governance()).to.equal(deployer.address);
        expect(await quoter.pendingGovernance()).to.equal(ZERO_ADDRESS);
        await quoter.connect(deployer).setPendingGovernance(governor.address);
        await quoter.connect(governor).acceptGovernance();
      });
    });

    describe("signers", function () {
      it("starts with governance as signer", async function () {
        expect(await quoter.isAuthorizedSigner(deployer.address)).to.equal(false);
        expect(await quoter.isAuthorizedSigner(governor.address)).to.equal(true);
        expect(await quoter.isAuthorizedSigner(signer.address)).to.equal(false);
      });
      it("reverts add signer by non governance", async function () {
        await expect(quoter.connect(deployer).addSigner(deployer.address)).to.be.revertedWith("!governance");
      });
      it("reverts remove signer by non governance", async function () {
        await expect(quoter.connect(deployer).removeSigner(governor.address)).to.be.revertedWith("!governance");
      });
      it("can add signers", async function () {
        let tx = await quoter.connect(governor).addSigner(signer.address);
        expect(tx).to.emit(quoter, "SignerAdded").withArgs(signer.address);
        expect(await quoter.isAuthorizedSigner(signer.address)).to.equal(true);
        await expect(quoter.connect(signer).addSigner(signer.address)).to.be.revertedWith("!governance");
        await expect(quoter.connect(signer).removeSigner(signer.address)).to.be.revertedWith("!governance");
      });
      it("can remove signers", async function () {
        let tx = await quoter.connect(governor).removeSigner(signer.address);
        expect(tx).to.emit(quoter, "SignerRemoved").withArgs(signer.address);
        expect(await quoter.isAuthorizedSigner(signer.address)).to.equal(false);
        expect(await quoter.isAuthorizedSigner(governor.address)).to.equal(true);
        await quoter.connect(governor).addSigner(signer.address);
      });
    });

    describe("rates", function () {
      it("starts with no rates", async function () {
        expect(await quoter.rates("0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359")).to.equal(0);
        expect(await quoter.rates("0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee")).to.equal("1000000000000000000");
        expect(await quoter.tokenToEth("0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359", 10000)).to.equal(0);
        expect(await quoter.tokenToEth("0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", 10000)).to.equal(10000);
      });
      it("reverts set rates by non signer", async function () {
        await expect(quoter.connect(deployer).setRates([],[])).to.be.revertedWith("!signer");
      });
      it("validates inputs", async function () {
        await expect(quoter.connect(signer).setRates([ZERO_ADDRESS],[1,2])).to.be.revertedWith("unequal lengths");
      });
      it("can set rates", async function () {
        await quoter.connect(signer).setRates(["0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee","0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359","0xc00e94cb662c3520282e6f5717214004a7f26888","0x1f9840a85d5af5bf1d1762f925bdaddc4201f984","0x514910771af9ca656af840dff83e8264ecf986ca","0x2260fac5e5542a773aa44fbcfedf7c193bc2c599","0xdac17f958d2ee523a2206206994597c13d831ec7","0x1985365e9f78359a9b6ad760e32412f4a445e862","0x0d8775f648430679a709e98d2b0cb6250d2887ef","0xe41d2489571d322189246dafa5ebde1f4699f498","0x0000000000085d4780b73119b644ae5ecd22b376","0x6b175474e89094c44da98b954eedeac495271d0f","0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"],["1000000000000000000","5214879005539865","131044789678131649","9259278326749300","9246653217422099","15405738054265288944","420072999319953","12449913804491249","281485209795972","372925580282399","419446558886231","205364954059859","50000000000000"]);

        expect(await quoter.rates("0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359")).to.equal("5214879005539865");
        expect(await quoter.rates("0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee")).to.equal("1000000000000000000");
        expect(await quoter.tokenToEth("0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359", "1234567")).to.equal(BN.from("5214879005539865").mul("1234567").div("1000000000000000000")); // 18 decimals
        expect(await quoter.tokenToEth("0x2260fac5e5542a773aa44fbcfedf7c193bc2c599", "1234567")).to.equal(BN.from("15405738054265288944").mul("1234567").div("100000000")); // 8 decimals
      });
    });
  });
}
