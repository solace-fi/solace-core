/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Master } from "./Master";

export class MasterFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _solace: string,
    _solacePerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<Master> {
    return super.deploy(
      _solace,
      _solacePerBlock,
      overrides || {}
    ) as Promise<Master>;
  }
  getDeployTransaction(
    _solace: string,
    _solacePerBlock: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _solace,
      _solacePerBlock,
      overrides || {}
    );
  }
  attach(address: string): Master {
    return super.attach(address) as Master;
  }
  connect(signer: Signer): MasterFactory {
    return super.connect(signer) as MasterFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Master {
    return new Contract(address, _abi, signerOrProvider) as Master;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract SOLACE",
        name: "_solace",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_solacePerBlock",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_farmId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_farmAddress",
        type: "address",
      },
    ],
    name: "FarmCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allocPoints",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "farmAddresses",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "farmIndices",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "massUpdateFarms",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "numFarms",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_farmAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_allocPoints",
        type: "uint256",
      },
    ],
    name: "registerFarm",
    outputs: [
      {
        internalType: "uint256",
        name: "farmId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_farmId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_allocPoints",
        type: "uint256",
      },
    ],
    name: "setAllocPoints",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
    ],
    name: "setGovernance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_solacePerBlock",
        type: "uint256",
      },
    ],
    name: "setSolacePerBlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "solace",
    outputs: [
      {
        internalType: "contract SOLACE",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "solacePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalAllocPoints",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161095238038061095283398101604081905261002f91610060565b600180546001600160a01b039093166001600160a01b03199384161790556002556000805490911633179055610098565b60008060408385031215610072578182fd5b82516001600160a01b0381168114610088578283fd5b6020939093015192949293505050565b6108ab806100a76000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80637e0de2ef1161008c5780638d75ef67116100665780638d75ef67146101725780638f908ac714610185578063ab033ea914610198578063f26e5cfe146101ab576100df565b80637e0de2ef1461014d5780638069aa651461015757806386f44c7b1461016a576100df565b80633ef8d97e116100bd5780633ef8d97e146101285780635aa6e6751461013d57806372f9ab4314610145576100df565b8063032b49f9146100e45780631fa36cbe1461010d578063298a268714610115575b600080fd5b6100f76100f23660046106c2565b6101be565b60405161010491906107cd565b60405180910390f35b6100f76101d0565b6100f7610123366004610679565b6101d6565b610130610362565b60405161010491906106fb565b610130610371565b6100f7610380565b610155610386565b005b6100f7610165366004610658565b61040d565b6100f761041f565b6101306101803660046106c2565b610425565b6101556101933660046106c2565b610440565b6101556101a6366004610658565b61047a565b6101556101b93660046106da565b6104d3565b60076020526000908152604090205481565b60035481565b600080546001600160a01b0316331461020a5760405162461bcd60e51b815260040161020190610728565b60405180910390fd5b6001600160a01b038316600090815260066020526040902054156102405760405162461bcd60e51b81526004016102019061075f565b60046000815461024f90610844565b91829055506000818152600560209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038981169182179092558452600690925291829020839055600154915163095ea7b360e01b8152929350169063095ea7b3906102c99086906000199060040161070f565b602060405180830381600087803b1580156102e357600080fd5b505af11580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b91906106a2565b506103268183610530565b6040516001600160a01b0384169082907f74c6c5fd9a70ed43945f118ec4990df995359837f5484faeb4e3d6d5d72ae99c90600090a392915050565b6001546001600160a01b031681565b6000546001600160a01b031681565b60025481565b6004546001905b80821161040957600082815260056020526040808220548151633d53298f60e21b815291516001600160a01b039091169263f54ca63c926004808201939182900301818387803b1580156103e057600080fd5b505af11580156103f4573d6000803e3d6000fd5b505050508161040290610844565b915061038d565b5050565b60066020526000908152604090205481565b60045481565b6005602052600090815260409020546001600160a01b031681565b6000546001600160a01b0316331461046a5760405162461bcd60e51b815260040161020190610728565b600281905561047761056f565b50565b6000546001600160a01b031633146104a45760405162461bcd60e51b815260040161020190610728565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104fd5760405162461bcd60e51b815260040161020190610728565b811580159061050e57506004548211155b61052a5760405162461bcd60e51b815260040161020190610796565b61040982825b600082815260076020526040902054600354829161054d9161082d565b61055791906107d6565b60035560008281526007602052604090208190556104095b6004546001905b8082116104095760006003546000146105b7576003546000848152600760205260409020546002546105a8919061080e565b6105b291906107ee565b6105ba565b60005b6000848152600560205260409081902054905163c7a29c6f60e01b81529192506001600160a01b03169063c7a29c6f906105f89084906004016107cd565b600060405180830381600087803b15801561061257600080fd5b505af1158015610626573d6000803e3d6000fd5b50505050508161063590610844565b9150610576565b80356001600160a01b038116811461065357600080fd5b919050565b600060208284031215610669578081fd5b6106728261063c565b9392505050565b6000806040838503121561068b578081fd5b6106948361063c565b946020939093013593505050565b6000602082840312156106b3578081fd5b81518015158114610672578182fd5b6000602082840312156106d3578081fd5b5035919050565b600080604083850312156106ec578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252600b908201527f21676f7665726e616e6365000000000000000000000000000000000000000000604082015260600190565b60208082526012908201527f616c726561647920726567697374657265640000000000000000000000000000604082015260600190565b60208082526013908201527f6661726d20646f6573206e6f7420657869737400000000000000000000000000604082015260600190565b90815260200190565b600082198211156107e9576107e961085f565b500190565b60008261080957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156108285761082861085f565b500290565b60008282101561083f5761083f61085f565b500390565b60006000198214156108585761085861085f565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212209be0627ee09ee51f9bfa090c5c237b13f67e2386837dd9264ba4584b0c99ec4c64736f6c63430008000033";
