/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "activation()": FunctionFragment;
    "addStrategy(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addStrategyToQueue(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "creditAvailable(address)": FunctionFragment;
    "debtOutstanding(address)": FunctionFragment;
    "debtRatio()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delegatedAssets()": FunctionFragment;
    "deposit()": FunctionFragment;
    "depositWeth(uint256)": FunctionFragment;
    "emergencyShutdown()": FunctionFragment;
    "expectedReturn(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lastReport()": FunctionFragment;
    "lockedProfit()": FunctionFragment;
    "lockedProfitDegration()": FunctionFragment;
    "managementFee()": FunctionFragment;
    "maxRedeemableShares(address)": FunctionFragment;
    "minCapitalRequirement()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "performanceFee()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "processClaim(address,uint256)": FunctionFragment;
    "registry()": FunctionFragment;
    "removeStrategyFromQueue(address)": FunctionFragment;
    "report(uint256,uint256,uint256)": FunctionFragment;
    "revokeStrategy(address)": FunctionFragment;
    "rewards()": FunctionFragment;
    "setEmergencyShutdown(bool)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setLockedProfitDegration(uint256)": FunctionFragment;
    "setMinCapitalRequirement(uint256)": FunctionFragment;
    "setPerformanceFee(uint256)": FunctionFragment;
    "setWithdrawalQueue(address[])": FunctionFragment;
    "strategies(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateStrategyDebtRatio(address,uint256)": FunctionFragment;
    "updateStrategyMaxDebtPerHarvest(address,uint256)": FunctionFragment;
    "updateStrategyMinDebtPerHarvest(address,uint256)": FunctionFragment;
    "updateStrategyPerformanceFee(address,uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawalQueue(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategyToQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "creditAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "debtOutstanding",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "debtRatio", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositWeth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectedReturn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastReport",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedProfitDegration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeemableShares",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minCapitalRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processClaim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeStrategyFromQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "report",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setEmergencyShutdown",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockedProfitDegration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCapitalRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalQueue",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "strategies", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyDebtRatio",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyMaxDebtPerHarvest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyMinDebtPerHarvest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategyPerformanceFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalQueue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategyToQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtOutstanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWeth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectedReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastReport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedProfitDegration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRedeemableShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCapitalRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategyFromQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockedProfitDegration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCapitalRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyMaxDebtPerHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyMinDebtPerHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategyPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalQueue",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ClaimProcessed(address,uint256)": EventFragment;
    "DepositMade(address,uint256,uint256)": EventFragment;
    "EmergencyShutdown(bool)": EventFragment;
    "StrategyAdded(address,uint256,uint256,uint256,uint256)": EventFragment;
    "StrategyAddedToQueue(address)": EventFragment;
    "StrategyRemovedFromQueue(address)": EventFragment;
    "StrategyReported(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "StrategyRevoked(address)": EventFragment;
    "StrategyUpdateDebtRatio(address,uint256)": EventFragment;
    "StrategyUpdateMaxDebtPerHarvest(address,uint256)": EventFragment;
    "StrategyUpdateMinDebtPerHarvest(address,uint256)": EventFragment;
    "StrategyUpdatePerformanceFee(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateWithdrawalQueue(address[])": EventFragment;
    "WithdrawalMade(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAddedToQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemovedFromQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyReported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyUpdateDebtRatio"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyUpdateMaxDebtPerHarvest"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyUpdateMinDebtPerHarvest"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyUpdatePerformanceFee"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWithdrawalQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalMade"): EventFragment;
}

export class Vault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VaultInterface;

  functions: {
    DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    activation(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "activation()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addStrategy(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addStrategy(address,uint256,uint256,uint256,uint256)"(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addStrategyToQueue(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addStrategyToQueue(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    creditAvailable(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "creditAvailable(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    debtOutstanding(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "debtOutstanding(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    debtRatio(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "debtRatio()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "decimals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegatedAssets(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "delegatedAssets()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    depositWeth(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositWeth(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyShutdown(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "emergencyShutdown()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    expectedReturn(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "expectedReturn(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    governance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastReport(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastReport()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lockedProfit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lockedProfit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lockedProfitDegration(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lockedProfitDegration()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    managementFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "managementFee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxRedeemableShares(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxRedeemableShares(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minCapitalRequirement(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minCapitalRequirement()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    performanceFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "performanceFee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    processClaim(
      claimant: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processClaim(address,uint256)"(
      claimant: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "registry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    removeStrategyFromQueue(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeStrategyFromQueue(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "report(uint256,uint256,uint256)"(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeStrategy(
      strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeStrategy(address)"(
      strategy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewards(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rewards()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setEmergencyShutdown(
      active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEmergencyShutdown(bool)"(
      active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLockedProfitDegration(
      degration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLockedProfitDegration(uint256)"(
      degration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinCapitalRequirement(
      newMCR: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinCapitalRequirement(uint256)"(
      newMCR: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPerformanceFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWithdrawalQueue(
      _queue: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWithdrawalQueue(address[])"(
      _queue: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    strategies(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        performanceFee: BigNumber;
        activation: BigNumber;
        debtRatio: BigNumber;
        minDebtPerHarvest: BigNumber;
        maxDebtPerHarvest: BigNumber;
        lastReport: BigNumber;
        totalDebt: BigNumber;
        totalGain: BigNumber;
        totalLoss: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      };
    }>;

    "strategies(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        performanceFee: BigNumber;
        activation: BigNumber;
        debtRatio: BigNumber;
        minDebtPerHarvest: BigNumber;
        maxDebtPerHarvest: BigNumber;
        lastReport: BigNumber;
        totalDebt: BigNumber;
        totalGain: BigNumber;
        totalLoss: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
      };
    }>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalAssets()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalDebt(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalDebt()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStrategyDebtRatio(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateStrategyDebtRatio(address,uint256)"(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStrategyMaxDebtPerHarvest(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateStrategyMaxDebtPerHarvest(address,uint256)"(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStrategyMinDebtPerHarvest(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateStrategyMinDebtPerHarvest(address,uint256)"(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStrategyPerformanceFee(
      _strategy: string,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateStrategyPerformanceFee(address,uint256)"(
      _strategy: string,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      shares: BigNumberish,
      maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      shares: BigNumberish,
      maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "withdrawalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  activation(overrides?: CallOverrides): Promise<BigNumber>;

  "activation()"(overrides?: CallOverrides): Promise<BigNumber>;

  addStrategy(
    _strategy: string,
    _debtRatio: BigNumberish,
    _minDebtPerHarvest: BigNumberish,
    _maxDebtPerHarvest: BigNumberish,
    _performanceFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addStrategy(address,uint256,uint256,uint256,uint256)"(
    _strategy: string,
    _debtRatio: BigNumberish,
    _minDebtPerHarvest: BigNumberish,
    _maxDebtPerHarvest: BigNumberish,
    _performanceFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addStrategyToQueue(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addStrategyToQueue(address)"(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditAvailable(
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "creditAvailable(address)"(
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtOutstanding(
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "debtOutstanding(address)"(
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "debtRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

  "delegatedAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  depositWeth(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositWeth(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyShutdown(overrides?: CallOverrides): Promise<boolean>;

  "emergencyShutdown()"(overrides?: CallOverrides): Promise<boolean>;

  expectedReturn(
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "expectedReturn(address)"(
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastReport(overrides?: CallOverrides): Promise<BigNumber>;

  "lastReport()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedProfit()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedProfitDegration(overrides?: CallOverrides): Promise<BigNumber>;

  "lockedProfitDegration()"(overrides?: CallOverrides): Promise<BigNumber>;

  managementFee(overrides?: CallOverrides): Promise<BigNumber>;

  "managementFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeemableShares(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maxRedeemableShares(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minCapitalRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  "minCapitalRequirement()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  processClaim(
    claimant: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processClaim(address,uint256)"(
    claimant: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  removeStrategyFromQueue(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeStrategyFromQueue(address)"(
    _strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  report(
    gain: BigNumberish,
    loss: BigNumberish,
    _debtPayment: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "report(uint256,uint256,uint256)"(
    gain: BigNumberish,
    loss: BigNumberish,
    _debtPayment: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeStrategy(
    strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeStrategy(address)"(
    strategy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewards(overrides?: CallOverrides): Promise<string>;

  "rewards()"(overrides?: CallOverrides): Promise<string>;

  setEmergencyShutdown(
    active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEmergencyShutdown(bool)"(
    active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLockedProfitDegration(
    degration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLockedProfitDegration(uint256)"(
    degration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinCapitalRequirement(
    newMCR: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinCapitalRequirement(uint256)"(
    newMCR: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPerformanceFee(uint256)"(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWithdrawalQueue(
    _queue: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWithdrawalQueue(address[])"(
    _queue: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  strategies(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<{
    performanceFee: BigNumber;
    activation: BigNumber;
    debtRatio: BigNumber;
    minDebtPerHarvest: BigNumber;
    maxDebtPerHarvest: BigNumber;
    lastReport: BigNumber;
    totalDebt: BigNumber;
    totalGain: BigNumber;
    totalLoss: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
  }>;

  "strategies(address)"(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<{
    performanceFee: BigNumber;
    activation: BigNumber;
    debtRatio: BigNumber;
    minDebtPerHarvest: BigNumber;
    maxDebtPerHarvest: BigNumber;
    lastReport: BigNumber;
    totalDebt: BigNumber;
    totalGain: BigNumber;
    totalLoss: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
  }>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  "totalDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStrategyDebtRatio(
    _strategy: string,
    _debtRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateStrategyDebtRatio(address,uint256)"(
    _strategy: string,
    _debtRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStrategyMaxDebtPerHarvest(
    _strategy: string,
    _maxDebtPerHarvest: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateStrategyMaxDebtPerHarvest(address,uint256)"(
    _strategy: string,
    _maxDebtPerHarvest: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStrategyMinDebtPerHarvest(
    _strategy: string,
    _minDebtPerHarvest: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateStrategyMinDebtPerHarvest(address,uint256)"(
    _strategy: string,
    _minDebtPerHarvest: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStrategyPerformanceFee(
    _strategy: string,
    _performanceFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateStrategyPerformanceFee(address,uint256)"(
    _strategy: string,
    _performanceFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    shares: BigNumberish,
    maxLoss: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    shares: BigNumberish,
    maxLoss: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawalQueue(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "withdrawalQueue(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    activation(overrides?: CallOverrides): Promise<BigNumber>;

    "activation()"(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStrategy(address,uint256,uint256,uint256,uint256)"(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addStrategyToQueue(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStrategyToQueue(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditAvailable(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditAvailable(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtOutstanding(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtOutstanding(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "debtRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "delegatedAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<void>;

    "deposit()"(overrides?: CallOverrides): Promise<void>;

    depositWeth(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "depositWeth(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyShutdown(overrides?: CallOverrides): Promise<boolean>;

    "emergencyShutdown()"(overrides?: CallOverrides): Promise<boolean>;

    expectedReturn(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "expectedReturn(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastReport(overrides?: CallOverrides): Promise<BigNumber>;

    "lastReport()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedProfit()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfitDegration(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedProfitDegration()"(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    "managementFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeemableShares(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxRedeemableShares(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCapitalRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "minCapitalRequirement()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    processClaim(
      claimant: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processClaim(address,uint256)"(
      claimant: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    removeStrategyFromQueue(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeStrategyFromQueue(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "report(uint256,uint256,uint256)"(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeStrategy(strategy: string, overrides?: CallOverrides): Promise<void>;

    "revokeStrategy(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    "rewards()"(overrides?: CallOverrides): Promise<string>;

    setEmergencyShutdown(
      active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEmergencyShutdown(bool)"(
      active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockedProfitDegration(
      degration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLockedProfitDegration(uint256)"(
      degration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinCapitalRequirement(
      newMCR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinCapitalRequirement(uint256)"(
      newMCR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceFee(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerformanceFee(uint256)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalQueue(
      _queue: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalQueue(address[])"(
      _queue: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      performanceFee: BigNumber;
      activation: BigNumber;
      debtRatio: BigNumber;
      minDebtPerHarvest: BigNumber;
      maxDebtPerHarvest: BigNumber;
      lastReport: BigNumber;
      totalDebt: BigNumber;
      totalGain: BigNumber;
      totalLoss: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }>;

    "strategies(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<{
      performanceFee: BigNumber;
      activation: BigNumber;
      debtRatio: BigNumber;
      minDebtPerHarvest: BigNumber;
      maxDebtPerHarvest: BigNumber;
      lastReport: BigNumber;
      totalDebt: BigNumber;
      totalGain: BigNumber;
      totalLoss: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
    }>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateStrategyDebtRatio(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStrategyDebtRatio(address,uint256)"(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategyMaxDebtPerHarvest(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStrategyMaxDebtPerHarvest(address,uint256)"(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategyMinDebtPerHarvest(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStrategyMinDebtPerHarvest(address,uint256)"(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategyPerformanceFee(
      _strategy: string,
      _performanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStrategyPerformanceFee(address,uint256)"(
      _strategy: string,
      _performanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      shares: BigNumberish,
      maxLoss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      shares: BigNumberish,
      maxLoss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "withdrawalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    ClaimProcessed(
      claimant: string | null,
      amount: BigNumberish | null
    ): EventFilter;

    DepositMade(
      depositor: string | null,
      amount: BigNumberish | null,
      shares: BigNumberish | null
    ): EventFilter;

    EmergencyShutdown(active: null): EventFilter;

    StrategyAdded(
      strategy: string | null,
      debtRatio: null,
      minDebtPerHarvest: null,
      maxDebtPerHarvest: null,
      performanceFee: null
    ): EventFilter;

    StrategyAddedToQueue(strategy: string | null): EventFilter;

    StrategyRemovedFromQueue(strategy: string | null): EventFilter;

    StrategyReported(
      strategy: string | null,
      gain: null,
      loss: null,
      debtPaid: null,
      totalGain: null,
      totalLoss: null,
      totalDebt: null,
      debtAdded: null,
      debtRatio: null
    ): EventFilter;

    StrategyRevoked(strategy: null): EventFilter;

    StrategyUpdateDebtRatio(
      strategy: string | null,
      newDebtRatio: BigNumberish | null
    ): EventFilter;

    StrategyUpdateMaxDebtPerHarvest(
      strategy: string | null,
      newMaxDebtPerHarvest: BigNumberish | null
    ): EventFilter;

    StrategyUpdateMinDebtPerHarvest(
      strategy: string | null,
      newMinDebtPerHarvest: BigNumberish | null
    ): EventFilter;

    StrategyUpdatePerformanceFee(
      strategy: string | null,
      newPerformanceFee: BigNumberish | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UpdateWithdrawalQueue(queue: string[] | null): EventFilter;

    WithdrawalMade(
      withdrawer: string | null,
      value: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    activation(overrides?: CallOverrides): Promise<BigNumber>;

    "activation()"(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addStrategy(address,uint256,uint256,uint256,uint256)"(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addStrategyToQueue(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addStrategyToQueue(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditAvailable(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditAvailable(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtOutstanding(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtOutstanding(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "debtRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "delegatedAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: PayableOverrides): Promise<BigNumber>;

    "deposit()"(overrides?: PayableOverrides): Promise<BigNumber>;

    depositWeth(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositWeth(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyShutdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    expectedReturn(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "expectedReturn(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastReport(overrides?: CallOverrides): Promise<BigNumber>;

    "lastReport()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedProfit()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfitDegration(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedProfitDegration()"(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    "managementFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeemableShares(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxRedeemableShares(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minCapitalRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    "minCapitalRequirement()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    processClaim(
      claimant: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processClaim(address,uint256)"(
      claimant: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeStrategyFromQueue(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeStrategyFromQueue(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "report(uint256,uint256,uint256)"(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeStrategy(strategy: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeStrategy(address)"(
      strategy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    setEmergencyShutdown(
      active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEmergencyShutdown(bool)"(
      active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLockedProfitDegration(
      degration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLockedProfitDegration(uint256)"(
      degration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinCapitalRequirement(
      newMCR: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinCapitalRequirement(uint256)"(
      newMCR: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPerformanceFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPerformanceFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWithdrawalQueue(
      _queue: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWithdrawalQueue(address[])"(
      _queue: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    strategies(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "strategies(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateStrategyDebtRatio(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateStrategyDebtRatio(address,uint256)"(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateStrategyMaxDebtPerHarvest(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateStrategyMaxDebtPerHarvest(address,uint256)"(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateStrategyMinDebtPerHarvest(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateStrategyMinDebtPerHarvest(address,uint256)"(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateStrategyPerformanceFee(
      _strategy: string,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateStrategyPerformanceFee(address,uint256)"(
      _strategy: string,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      shares: BigNumberish,
      maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      shares: BigNumberish,
      maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "activation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStrategy(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addStrategy(address,uint256,uint256,uint256,uint256)"(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addStrategyToQueue(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addStrategyToQueue(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditAvailable(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditAvailable(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtOutstanding(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtOutstanding(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debtRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegatedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "delegatedAssets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    depositWeth(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositWeth(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emergencyShutdown()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expectedReturn(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "expectedReturn(address)"(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastReport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastReport()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedProfit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedProfitDegration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedProfitDegration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "managementFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeemableShares(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxRedeemableShares(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minCapitalRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minCapitalRequirement()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "performanceFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    processClaim(
      claimant: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processClaim(address,uint256)"(
      claimant: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStrategyFromQueue(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeStrategyFromQueue(address)"(
      _strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "report(uint256,uint256,uint256)"(
      gain: BigNumberish,
      loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeStrategy(
      strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeStrategy(address)"(
      strategy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEmergencyShutdown(
      active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEmergencyShutdown(bool)"(
      active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLockedProfitDegration(
      degration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLockedProfitDegration(uint256)"(
      degration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinCapitalRequirement(
      newMCR: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinCapitalRequirement(uint256)"(
      newMCR: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPerformanceFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWithdrawalQueue(
      _queue: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWithdrawalQueue(address[])"(
      _queue: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    strategies(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "strategies(address)"(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAssets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalDebt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateStrategyDebtRatio(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateStrategyDebtRatio(address,uint256)"(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateStrategyMaxDebtPerHarvest(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateStrategyMaxDebtPerHarvest(address,uint256)"(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateStrategyMinDebtPerHarvest(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateStrategyMinDebtPerHarvest(address,uint256)"(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateStrategyPerformanceFee(
      _strategy: string,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateStrategyPerformanceFee(address,uint256)"(
      _strategy: string,
      _performanceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      shares: BigNumberish,
      maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      shares: BigNumberish,
      maxLoss: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
